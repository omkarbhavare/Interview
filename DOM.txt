🧱 1. What is the DOM?

DOM (Document Object Model) is a programming interface provided by the browser that allows developers to interact with HTML and XML documents.
It represents the page as a tree structure, where each element (like <div>, <p>, etc.) is a node.
DOM allows JavaScript to read, update, delete, or add elements or attributes dynamically.
Example: If you click a button and it shows a message without reloading the page — that’s DOM manipulation.

When the browser loads an HTML page, it parses the content and creates a DOM tree.
JS uses the DOM to access, change, or remove elements dynamically.
Think of it like a "live" structure of the webpage — anything you change in the DOM gets reflected on the screen.

🌳 2. How is the DOM structured?
The DOM is structured like a tree, also called a node tree.

The topmost node is the document.
Under it, you have element nodes (like <html>, <body>, <div>) and other node types.

Each element can have:

1. Attributes (e.g. class, id)
2. Text nodes (actual content inside tags)
3. Children (nested elements)

This creates a parent-child relationship that lets you navigate and modify any part of the page.

<body>
  <div id="box">Hello</div>
</body>

Here, div is a child of body, and "Hello" is a text node inside div.

🧩 3. What are the primary types of nodes in the DOM?

Element Node – tags like <div>, <ul>, <p>
Text Node – the actual text inside an element
Attribute Node – like class="btn" on an element
Comment Node – <!-- This is a comment -->
Document Node – represents the whole document (document object in JS)
Each node has its own properties and behaviors you can work with in JS.

🔍 4. How do you access DOM elements in JavaScript?

document.getElementById('id-name')         // single element by ID
document.getElementsByClassName('class')   // HTMLCollection of elements
document.getElementsByTagName('p')         // by tag name

// Modern methods:
document.querySelector('.class, #id, tag') // first match (like CSS)
document.querySelectorAll('div.item')      // NodeList of all matches
📌 Tip: querySelector and querySelectorAll are more flexible because they support CSS-style selectors.


🧠 5. What is DOM Manipulation?
DOM Manipulation = Changing the structure or content of the webpage using JavaScript.

Add new elements (appendChild, insertBefore)
Remove elements (removeChild, remove)
Update text (textContent, innerHTML)
Change styles or attributes (style, setAttribute)

______________________________________________________________________________________________________________________________

Event DELEGATION

✅ 1. What is Event Delegation and Why is it Useful?
🔍 Definition:
Event Delegation is a technique where one event listener is attached to a parent element, and it handles events triggered by its child elements, instead of attaching separate listeners to each child.

This works because of event bubbling – events triggered on a child element bubble up to its ancestors.

✅ Why Is It Useful?
Benefit	                        Explanation
🧵 Minimizes event listeners	Instead of 100 listeners, use 1 on the parent.
🧑‍💻 Better performance	       Less memory usage and faster DOM interaction.
🔄 Handles dynamic content	    Even elements added after page load are handled automatically.
📦 Simplifies code	            Centralized logic = easier maintenance.

<ul id="todo-list">
  <li><button>Task 1</button></li>
  <li><button>Task 2</button></li>
  <li><button>Task 3</button></li>
</ul>

document.getElementById("todo-list").addEventListener("click", function (event) {
  if (event.target.tagName === "BUTTON") {
    console.log("Clicked:", event.target.textContent);
  }
});

HTML code

<div class="todo-container">
  <h2>My Todo List</h2>
  <input type="text" id="taskInput" placeholder="Enter task..." />
  <button id="addTaskBtn">Add Task</button>
  <ul id="taskList"></ul>
</div>


// 🧠 JavaScript (with Event Delegation):

<script>
  const taskInput = document.getElementById("taskInput");
  const addTaskBtn = document.getElementById("addTaskBtn");
  const taskList = document.getElementById("taskList");

  addTaskBtn.addEventListener("click", () => {
    const taskText = taskInput.value.trim();
    if (taskText === "") return;

    const li = document.createElement("li");
    li.innerHTML = `
      <span>${taskText}</span>
      <div>
        <button class="done-btn">Done</button>
        <button class="delete-btn">Delete</button>
      </div>
    `;
    taskList.appendChild(li);
    taskInput.value = "";
  });

  // 🎯 Event Delegation: one listener on the parent <ul>
  taskList.addEventListener("click", (event) => {
    const target = event.target;
    const li = target.closest("li"); // Find the <li> of the clicked button

    if (target.classList.contains("done-btn")) {
      li.querySelector("span").classList.toggle("done");
    }

    if (target.classList.contains("delete-btn")) {
      li.remove();
    }
  });
</script>

🔥 How Event Delegation Works Here:
We add only one click listener to the parent <ul id="taskList">.
Inside the event handler, we:
Check which button was clicked (done-btn or delete-btn) 
Perform the relevant action (toggle done or remove the task)


<style>
  .todo-container {
    max-width: 400px;
    margin: 2rem auto;
    padding: 1rem;
    border: 2px solid teal;
    border-radius: 10px;
    background-color: #f9fffb;
  }
  li {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem;
    margin: 0.3rem 0;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  .done {
    text-decoration: line-through;
    color: gray;
  }
  button {
    margin-left: 10px;
    padding: 0.2rem 0.5rem;
    border: none;
    background-color: #008080;
    color: white;
    border-radius: 5px;
    cursor: pointer;
  }
</style>

______________________________________________________________________________________________________________________________

